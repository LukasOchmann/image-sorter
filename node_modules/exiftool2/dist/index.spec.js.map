{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { createReadStream } from \"fs\";\nimport { join } from \"path\";\nimport { exec, open, ExifData } from \"./index\";\n\nconst FIXTURE_DIR = join(__dirname, \"../test/fixtures\");\n\ndescribe(\"exiftool2\", () => {\n  it(\"should pipe png\", done => {\n    const exiftool = exec(\"-fast\", \"-\");\n\n    createReadStream(join(FIXTURE_DIR, \"placeholder.png\")).pipe(exiftool);\n\n    exiftool.on(\"exif\", exif => {\n      expect(exif.length).toEqual(1);\n      expect(exif[0].FileType).toEqual(\"PNG\");\n\n      return done();\n    });\n  });\n\n  it(\"should pipe jpeg with trailers\", done => {\n    const exiftool = exec(\"-\");\n    const stream = createReadStream(join(FIXTURE_DIR, \"subway.jpeg\"));\n    let ended = false;\n\n    exiftool.on(\"exif\", exif => {\n      expect(ended).toEqual(true);\n      expect(exif.length).toEqual(1);\n      expect(exif[0].FileType).toEqual(\"JPEG\");\n\n      return done();\n    });\n\n    stream.on(\"end\", () => (ended = true));\n    stream.pipe(exiftool);\n  });\n\n  it(\"should pipe jpeg fast\", done => {\n    const exiftool = exec(\"-fast\", \"-\");\n    const stream = createReadStream(join(FIXTURE_DIR, \"subway.jpeg\"));\n    let ended = false;\n\n    exiftool.on(\"exif\", exif => {\n      expect(ended).toEqual(false);\n      expect(exif.length).toEqual(1);\n      expect(exif[0].FileType).toEqual(\"JPEG\");\n    });\n\n    stream.on(\"end\", () => {\n      ended = true;\n      return done();\n    });\n\n    stream.pipe(exiftool);\n  });\n\n  it(\"should read from filename\", done => {\n    const exiftool = exec(\"-fast\", join(FIXTURE_DIR, \"placeholder.png\"));\n\n    exiftool.on(\"exif\", exif => {\n      expect(exif.length).toEqual(1);\n      expect(exif[0].FileType).toEqual(\"PNG\");\n\n      return done();\n    });\n  });\n\n  it(\"should support short output\", done => {\n    const exiftool = exec(\"-S\", join(FIXTURE_DIR, \"placeholder.png\"));\n\n    exiftool.on(\"exif\", exif => {\n      expect(exif.length).toEqual(1);\n      expect(exif[0].FileType).toEqual(\"PNG\");\n\n      return done();\n    });\n  });\n\n  it(\"should group output\", done => {\n    const exiftool = exec(\"-g\", join(FIXTURE_DIR, \"placeholder.png\"));\n\n    exiftool.on(\"exif\", exif => {\n      expect(exif.length).toEqual(1);\n      expect(exif[0].File.FileType).toEqual(\"PNG\");\n\n      return done();\n    });\n  });\n\n  it(\"should emit errors\", done => {\n    const exiftool = exec(\"this_file_does_not_exist.png\");\n\n    exiftool.on(\"error\", error => {\n      expect(error.message).toEqual(\n        \"Error: File not found - this_file_does_not_exist.png\"\n      );\n\n      return done();\n    });\n  });\n\n  it(\"should parse multiple exif data\", done => {\n    const exiftool = exec(\"-common\", FIXTURE_DIR);\n\n    exiftool.on(\"exif\", (exif: ExifData) => {\n      expect(exif.map(x => x.FileName).sort()).toEqual([\n        \"placeholder.png\",\n        \"subway.jpeg\"\n      ]);\n\n      return done();\n    });\n  });\n\n  it(\"should stay open\", () => {\n    const exiftool = open();\n\n    const data = Promise.all([\n      exiftool.send(join(FIXTURE_DIR, \"placeholder.png\")),\n      exiftool.send(join(FIXTURE_DIR, \"subway.jpeg\")),\n      exiftool.send(join(FIXTURE_DIR, \"placeholder.png\"))\n    ]);\n\n    exiftool.close();\n\n    return data.then(exifs => {\n      expect(exifs.length).toEqual(3);\n      expect(exifs[0][0].FileType).toEqual(\"PNG\");\n      expect(exifs[1][0].FileType).toEqual(\"JPEG\");\n      expect(exifs[2][0].FileType).toEqual(\"PNG\");\n    });\n  });\n\n  it(\"should stream multiple files\", () => {\n    const exiftool = open();\n\n    const data = Promise.all([\n      exiftool.read(createReadStream(join(FIXTURE_DIR, \"placeholder.png\"))),\n      exiftool.read(createReadStream(join(FIXTURE_DIR, \"subway.jpeg\"))),\n      exiftool.read(createReadStream(join(FIXTURE_DIR, \"placeholder.png\")))\n    ]);\n\n    exiftool.close();\n\n    return data.then(exifs => {\n      expect(exifs.length).toEqual(3);\n      expect(exifs[0][0].FileType).toEqual(\"PNG\");\n      expect(exifs[1][0].FileType).toEqual(\"JPEG\");\n      expect(exifs[2][0].FileType).toEqual(\"PNG\");\n    });\n  });\n});\n"]}